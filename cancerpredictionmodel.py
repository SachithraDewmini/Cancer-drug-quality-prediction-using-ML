# -*- coding: utf-8 -*-
"""CancerPredictionModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19znQ-QK1xGUlInIaLcO84DZ5DF4ibbcp
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

import pandas as pd
path = '/content/drive/MyDrive/Cancer_Prediction/Cancer_Data.csv'

cancer_data = pd.read_csv(path)

pd.set_option('display.max_columns', None)
cancer_data.head()

cancer_data.drop('id', axis=1, inplace=True)

from sklearn.preprocessing import LabelEncoder
le= LabelEncoder()
cancer_data['diagnosis']= le.fit_transform(cancer_data['diagnosis'])

cancer_data.head()

cancer_data['diagnosis'].value_counts(normalize= True)

cancer_data.info()

cancer_data.drop('Unnamed: 32', axis=1, inplace= True)

cancer_data.columns

cancer_data.shape
cancer_data.describe()

cancer_data.duplicated().sum()

cancer_data[['diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',
       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',
       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',
       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',
       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',
       'fractal_dimension_se', 'radius_worst', 'texture_worst',
       'perimeter_worst', 'area_worst', 'smoothness_worst',
       'compactness_worst', 'concavity_worst', 'concave points_worst',
       'symmetry_worst', 'fractal_dimension_worst']].corr().style.background_gradient(cmap='coolwarm')

relevant= cancer_data[['diagnosis', 'fractal_dimension_mean', 'concave points_worst', 'radius_worst','perimeter_worst',	'area_worst', 'perimeter_mean', 'area_mean', 'radius_mean' ]]
relevant.corr().style.background_gradient(cmap='coolwarm')

X= cancer_data[['fractal_dimension_mean', 'concave points_worst', 'perimeter_worst']]
y= cancer_data['diagnosis']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.3, random_state= 42)
scx= StandardScaler()
X_train_scled= scx.fit_transform(X_train)
X_test_scled= scx.transform(X_test)

from sklearn.linear_model import LogisticRegression
lr= LogisticRegression()
lr.fit(X_train_scled, y_train)
y_pred= lr.predict(X_test_scled)
y_pred

from sklearn.metrics import accuracy_score, confusion_matrix
accuracy_score(y_test, y_pred)

cm= pd.DataFrame(confusion_matrix(y_test, y_pred))
sns.heatmap(cm, annot=True, fmt='d', cmap='Reds')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

cancer_data.tail()

print(lr.predict(scx.transform([[0.05648, 0.1418, 126.70 ]])))

cancer_data[cancer_data['diagnosis']==0]

print(lr.predict(scx.transform([[0.06503, 0.02564, 57.26]])))